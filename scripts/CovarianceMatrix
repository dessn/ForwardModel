#!/usr/bin/env bash
#=
JULIA="${JULIA:-julia}"
JULIA_CMD="${JULIA_CMD:-$JULIA --color=yes --startup-file=no}"
# below gets the directory name of the script, even if there is a symlink involved
# from https://stackoverflow.com/questions/59895/get-the-source-directory-of-a-bash-script-from-within-the-script-itself
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
export JULIA_PROJECT=$DIR/.. # $DIR is the scripts directory, so we go up a level to get to the base project directory
export JULIA_LOAD_PATH=@:@stdlib  # exclude default environment
export JULIA_DEPOT_PATH=$JULIA_PROJECT/.julia
exec env LD_LIBRARY_PATH="" $JULIA_CMD -e 'include(popfirst!(ARGS))' "$SOURCE" "$@"
=#
# First check whether we need to instantiate
using Pkg
Pkg.instantiate()
#installed_deps = sort!([pair.second.name for pair in Pkg.dependencies() if pair.second.is_direct_dep])
#deps = sort!(collect(keys(TOML.parsefile(abspath("$(@__DIR__)/../Project.toml"))["deps"])))
#@show installed_deps
#@show deps
#if installed_deps != deps
#    @info "Missing some packages, instantiating"
#    Pkg.instantiate()
#end

using ArgParse

function get_args()
    s = ArgParseSettings()
    @add_arg_table s begin
        "--verbose", "-v"
            help = "Increase level of logging verbosity"
            action = :store_true
        "input"
            help = "Path to .toml file."
            required = true
    end

    return parse_args(s)
end
args = get_args()

# Assuming args worked, do eveything else
using TOML

include("../src/CovarianceMatrix.jl")
using .CovarianceMatrix

# Run script
verbose = args["verbose"]
toml = abspath(args["input"])

create_covariance_matrix(toml, verbose)
